<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Render\Markup;

/**
 * Implements hook_preprocess_html() for block templates.
 */
function aspTheme_preprocess_html(&$variables) {
  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $path);
  if (isset($path_args[1]) && isset($path_args[2]) && ($path_args[1] == 'node') && (is_numeric($path_args[2]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[2];
  }
  if (isset($path_args[1]) && isset($path_args[2]) && isset($path_args[3]) && ($path_args[1] == 'events') && ($path_args[2] == 'series') && (is_numeric($path_args[3]))) {
    $variables['attributes']['class'][] = 'event-series';
  }

}

/**
 * Implements hook_preprocess_image_widget().
 */
function aspTheme_preprocess_image_widget(array &$variables) {
  $data = &$variables['data'];

  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}

/**
 * Implements template_preprocess_image().
 */
function aspTheme_preprocess_image(&$variables) {
  // Check the image style.
  if ($variables['style_name'] == 'img_fluid') {
    // Set class.
    $variables['attributes']['class'][] = 'img-fluid';
  }
}

/**
 * Implements template_preprocess_field().
 */
function aspTheme_preprocess_field(&$variables) {
  $node = $variables['element']['#object'];
  if ($node->bundle() == 'affinity_group' || $node->bundle() == 'access_news') {
    if ($variables['field_name'] == 'field_tags') {
      foreach ($variables['items'] as $key => $item) {
        $tag_classes = ['inline-block', 'font-normal', 'no-underline', 'px-2', 'py-1', 'hover--border-dark-teal', 'border', 'leading-tight', 'whitespace-nowrap'];
        $variables['items'][$key]['content']['#attributes']['class'] = $tag_classes;
      }
    }
    if ($variables['field_name'] == 'field_image') {
      foreach ($variables['items'] as $key => $item) {
        $classes = ['object-contain', 'm-0', 'h-auto'];
        $variables['items'][$key]['content']['#item_attributes']['class'] = $classes;
      }
    }
  }
}

/**
 * Add classes to tag field for CI Links.
 */
function aspTheme_preprocess_views_view_field__webform_submission_value_8(&$variables) {
  if ($variables['output']) {
    $output = $variables['output'];
  }
  else {
    return;
  }
  if ($output == ' ') {
    return;
  }
  $tag_classes = 'inline-block font-normal border border-solid border-black px-2 py-1 no-underline me-2 mb-2 hover--border-dark-teal';
  // Parse the $output string to get the links and add classes to them.
  $new_output = '';
  $dom = new DOMDocument();
  $dom->loadHTML($output);
  $links = $dom->getElementsByTagName('a');
  foreach ($links as $link) {
    $link->setAttribute('class', $tag_classes);
    $new_output .= $dom->saveHTML($link);
  }
  $variables['output'] = Markup::create($new_output);
}
